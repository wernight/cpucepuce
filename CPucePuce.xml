<document>
	<author><name>Werner BEROUX</name><email>wbc@alc-wbc.com</email><web-site>www.alc-wbc.com</web-site></author><page name="CPucePuce"><title>CPucePuce</title><keywords>puce, t2g, telecarte, lecteur, c++, carte, telephonique</keywords><description>Lecteur de télécartes (carte à puces)</description><index type="Logiciels">../logiciel.htm</index><introduction>Les cartes à puces sont de plus en plus répandus. Leur sécurité reste encore exemplaire. Nous allons les étudier d'un peu plus près pour voir comment lire une carte téléphonique classique, et cela sur plusieurs plans: Matériel, fonctionnement de la puce, logiciel. Il nous faudra réaliser un petit programme sur PC qui lira les données: CPucePuce.
Nous allons voir rapidement comment créer une boite de dialogue sans MFC, gérer ses évènements, créer un liste déroulante, etc. Ensuite nous verrons comment lire la puce et interpréter les données.</introduction></page><section name="creation dlgbox" title="Création d'un boite de dialogue"><paragraph name="new proj">On lance Visual C++, nouveau, Projets et on sélectionne "Win32 Application". On valide et on demande "A single Win32 Application" pour avoir un truc vide tout prêt. Maintenant on va modifier notre boite de dialogue dans l'éditeur de ressource et y ajouter tous les contrôles etc. (voir la capture d'écran ci-dessous). Je pense que vous savez faire ça.</paragraph><image name="image"><link type="img">C:\Program Files\NeoEZ\cpucepuce.png</link><legend>Résultat final du programme</legend></image><paragraph name="1er code">Il reste ensuite à gérer ces contrôles. On ouvre notre fichier source principal et on commence par modifier notre WinMain(...) qui est la première fonction exécutée.</paragraph><code syntax="C++" name="WinMain">// Le programmes commence ici.
int APIENTRY WinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPSTR     lpCmdLine,
                     int       nCmdShow)
{
	// On créé la boit de dialogue
	DialogBox(hInstance, (LPCTSTR)IDD_MAIN, NULL, (DLGPROC)DialogProc);

	return false;
}</code><paragraph name="WinMain">Une fonction suffit pour créer une boite de dialog. hInstance nous est fournis par Windows. On donne l'ID en chaîne de notre ressource. Pas de parent donc NULL. Et enfin DialogProc pour gérer les évènements. Il s'agit d'une fonction a déclarer avant WinMain évidemment.</paragraph><code syntax="C++" name="DlgProc">//  Traite les message de la fenêtre.
LRESULT CALLBACK DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	HWND	hWndCtrl;
	int		wmId,
			wmEvent;

	switch (message) 
	{
	case WM_INITDIALOG:		// Initialisation
		g_hDlg = hDlg;			// Au définis la variable globale
		// LPT
		hWndCtrl = GetDlgItem(hDlg, IDC_LPT_COMBO);
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "0x378");
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "0x278");
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "0x3BC");
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "0x2BC");
		SendMessage(hWndCtrl, CB_SETCURSEL, 0, 0);
		// Détection d'insertion
		hWndCtrl = GetDlgItem(hDlg, IDC_DETEC_COMBO);
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "Aucun");
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "/ERROR");
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "SELECT");
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "PE");
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "/ACK");
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "BUSY");
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "/STROBE");
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "/AUTOFEED");
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "/INIT");
		SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "/SELECT IN");
		SendMessage(hWndCtrl, CB_SETCURSEL, 0, 0);
		/* ATTENTION : J'ai retiré des lignes ici pour éviter
				de répéter du code pour rien */
		break;

	case WM_COMMAND:		// Traitre les commandes
		wmId    = LOWORD(wParam); 
		wmEvent = HIWORD(wParam); 
		switch (wmId)
		{
		case IDCANCEL:			// Quand on clique sur "Quitter"
			PostQuitMessage(0);	// Quitte l'application
			break;
		case IDOK:			// Quand on clique sur "Lire"
			LirePuce();		// Lance la lecture
			break;
		}
		break;

	case WM_DESTROY:		// On quitte tout
		PostQuitMessage(0);
		break;
   }
   return 0;
}
</code><paragraph name="WM_INITDIALOG">Cette fonction est un CallBack. Soit une fonction appelée par une autre, ici par Windows. Nous allons ajouter les éléments dans les liste déroulantes à l'initialisation de la boite de dialogue: WM_INITDIALOG. Pour ajouter, enlever, etc. des éléments d'une combo box (liste déroulante) on précède par évènement. Nous envoyons donc un évènement à la fenêtre (HWND) de notre contrôle, en lui demandant de rajouter un texte:
hWndCtrl = GetDlgItem(hDlg, IDC_LPT_COMBO);
SendMessage(hWndCtrl, CB_ADDSTRING, 0, (LONG) (LPSTR) "0x378");</paragraph><paragraph name="WM_COMMAND">Ensuite il s'agit de gérer les évènement des boutons comme de quitter l'application quand on clique sur le bouton Quitter (IDCANCEL). C'est géré dans WM_COMMAND. PostQuitMessage(0) quitte l'application sans erreur (0). LirePuce() est la fonction qui va lire notre puce et afficher ses informations.</paragraph></section><section name="Lecture puce" title="Lecture de notre carte à puce"><paragraph name="explication flash">Voici le circuit pour lire les données de la puce. La petite animation vous montre les données que le programme doit définir et la réponse de puce. Remarquez que le port parallèle et la puce sont compatibles TTL. Cela signifie qu'un bit 0=0V et 1=+5V. Donc pas besoins de composants.</paragraph><paragraph name="flash">Voici le circuit pour pour lire les données de la puce. La petite animation vous montre les données que le programme doit définir et la réponse de puce.
&lt;!-- URL's used in the movie--&gt;
&lt;!-- text used in the movie--&gt;
&lt;!--Carte téléphonique Port LPT Prise DP25 1 13 2 4 6 11 7 8 9 10 12 14 15 16 17 18 19 24 20 21 22 23 Vcc + Vpp R/W Horloge E/S Reset/Up +5v 0v +5v 0v +5v 0v +5v 0v +5v 0v Donnée définie par le PC Donnée définie par la puce /STROBE D0 D1 D2 D3 D4 D5 D6 D7 /ACK BUSY PAPER END SELECT /AUTO FEED ERROR /INIT /SELECT IN GROUND GROUND GROUND GROUND GROUND GROUND GROUND GROUND Vcc +5v (alimentation) Read/Write Horloge Reset/Up Fusible Entrée/Sortie (donnéesà Vpp +21v (tension programmation) Masse Prises LPT Prises de la Puce Play / Pause Vcc + Vpp R/W Horloge E/S Reset/Up +5v 0v +5v 0v +5v 0v +5v 0v +5v 0v Donnée définie par le PC Donnée définie par la puce /STROBE D0 D1 D2 D3 D4 D5 D6 D7 /ACK BUSY PAPER END SELECT /AUTO FEED ERROR /INIT /SELECT IN GROUND GROUND GROUND GROUND GROUND GROUND GROUND GROUND Vcc +5v (alimentation) Read/Write Horloge Reset/Up Fusible Entrée/Sortie (donnéesà Vpp +21v (tension programmation) Masse --&gt;&lt;OBJECT classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
 codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=5,0,0,0"
 WIDTH=98% HEIGHT=98%&gt;
 &lt;PARAM NAME=movie VALUE="cpucepuce.swf"&gt; &lt;PARAM NAME=play VALUE=false&gt; &lt;PARAM NAME=quality VALUE=high&gt; &lt;PARAM NAME=bgcolor VALUE=#FFFFFF&gt; &lt;EMBED src="puce.swf" play=false quality=high bgcolor=#FFFFFF  WIDTH=98% HEIGHT=98% TYPE="application/x-shockwave-flash" PLUGINSPAGE="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash"&gt;&lt;/EMBED&gt;
&lt;/OBJECT&gt;</paragraph><paragraph name="1, 2, 3 , 4">Il faut dans l'ordre:
&lt;ul&gt;
&lt;li&gt;Récupérer les informations entrées dans la boite de dialogue.
&lt;li&gt;Lire la puce et enregistrer ses données.
&lt;li&gt;Interpréter les données pour en tirer des informations.
&lt;li&gt;Afficher ces informations dans la boite de dialogue.
&lt;ul&gt;</paragraph><paragraph name="début">Nous commençons par déclarer toutes nos variables. Comme il n'existe pas de CString ou autre classe/variable pour gérer facilement les chaînes, il s'agit de gérer ça sois même. On prévois donc un buffer pour enregistrer les données de la puce brute (binaire), et un pour les enregistrer en texte formaté. Les cartes téléphone nouvelles (T2G) contiennent 512 bits soit 64 octets.
</paragraph><code syntax="C++" name="code">bool	bData[512];	// 512 bits, soit la taille de la mémoire d'un T2G
char	lzDataText[600];	// On prévois plus de 512 pour les espaces etc.
</code><note title="Danger" img="http://www.programmationworld.com/site/images/avoid.gif" name="note">Si vous prévoyez un buffer pour le texte, n'oubliez jamais qu'il doit y avoir un caractère vide à la fin.</note><paragraph name="GetPortAndBit">Pour récupérer l'adresse physique du port ainsi que le bit à modifier pour accéder aux données voulues j'ai créé une petite fonction. Elle donne pour un texte (ex: "D1") le port et le bit à modifier: GetPortAndBit(...). Cette fonction va comparer deux chaînes de caractère à l'aide de la fonction stricmp(a,b) qui compare sans prendre en compte la case. Je vous invite à voir le code source complet pour cette fonction.</paragraph><paragraph name="Gestion du port //">Toutes données en main, il faut s'occuper de gérer le port parallèle pour envoyer et recevoir les données de la puce. La fonction _outp(port, valeur) permet d'écrire à un port donnée une série de 8 bits. Il nous faudra donc modifier souvent que un bit et laisser les 7 autres bits intact (cf.: Cours sur les système numériques). De même _inp(port) revois la valeur des 8 bits de ce port.</paragraph><paragraph name="init port 0">On comment par tout mettre à 0, pas de courant nulle part. Si on met à 1 l'un des bits, l'une des broches du port parallèle aura un potentiel de +5V par rapport à la masse (cf: PC-Team, cours sur le port parallèle, ...).</paragraph><code syntax="C++" name="init port 0">// Initiatise
GetPort(sPortDonnees);	// Va récupérer l'adresse du port parallèle
_outp(sPortDonnees, 0x00);	// 0x00 (hexadécimal) = 0 (décimal)</code><paragraph name="Alim">Si une alimentation de la puce par le port parallèle est demandée, nous mettons le bit correspondant à 1.</paragraph><code syntax="C++" name="Alim">// Alimentation
if (sPortVcc)
	_outp(sPortVcc, _inp(sPortVcc) | cBitVcc);
if (sPortVpp)
	_outp(sPortVpp, _inp(sPortVpp) | cBitVpp);
Sleep(20);	// Attentio 20 ms</code><paragraph name="reset">Bits initialisés à 0, puce alimentée, voila reste à initialiser le pointeur interne de la puce pour lire tout ce qu'elle contient depuis le début. Il donc faut dire à la puce que nous voulons faire un reset (du pointeur pas de la mémoire). Pour cela mettre le bit "Reset/Up" (qui correspond à une branche de la puce) à 0. En effet "Reset/Up" signifit: bit à 0 fait un reset, bit à 1 fait "Up", soit un déplacement du pointeur d'un cran. C'est déjà fait. Ensuite il faut dire à la puce d'agir. Pour cela il faut mettre la branche "Clock" (ou "Horloge") de 0 à 1. Le passage de 1 à 0 ne fait rien du tout.</paragraph><code syntax="None" name="reset">// Reset le pointeur
_outp(sPortClk, _inp(sPortClk) | cBitClk);		// Clock 1 -&gt; Reset pointer
_outp(sPortClk, _inp(sPortClk) &amp; ~cBitClk);		// Clock 0
// Reset 1 -&gt; Déplace le pointeur au prochain clock up
_outp(sPortReset, _inp(sPortReset) | cBitReset);	// Reset 1
</code><paragraph name="read data">Il nous reste plus qu'à lire les données. Le bit de reset/up est placé à 1 donc dès que nous faisons un passage de Clock 0 à 1, nous lirons le bit suivant sur la branche du port parallèle branchée à R/W (I/O permet de dire si nous voulons lire ou écrire).</paragraph><code syntax="C++" name="read data">for (i=0; i&lt;512; i++)
{
	// Lis les données
	if (_inp(sPortES) &amp; cBitES)
		bData[i] = false;
	else
		bData[i] = true;

	// Déplace le pointeur
	_outp(sPortClk, _inp(sPortClk) | cBitClk); // Clock 1
	_outp(sPortClk, _inp(sPortClk) &amp; ~cBitClk); // Clock 0
}</code><paragraph name="read data2">Cette fonction de base doit être améliorée pour mettre les données en texte. Texte qui doit avoir un espace tous les 8 bits et des retours à la ligne tous les 8 octets (64 bits).</paragraph><code syntax="C++" name="read data2">// Lis toutes les données
nBits = 0;
nOctets = 0;
nDataText = 0;
for (i=0; i&lt;512; i++)
{
	// Lis les données
	if (_inp(sPortES) &amp; cBitES)
	{
		lzDataText[nDataText++] = '0';
		bData[i] = false;
	}
	else
	{
		lzDataText[nDataText++] = '1';
		bData[i] = true;
	}

	// Met un peu en forme les données
	nBits++;	// Nombre de bits dans le bloc actuel
	if (nBits == 8)	// 8 bits par bloc
	{
		nBits = 0;	// Nouveau bloc, avec donc 0 bits
		nOctets++;	// Un octet de plus
		lzDataText[nDataText++] = ' ';	// Ajoute un espace
	}
	if (nOctets == 8)	// 8 octects par ligne
	{
		nOctets = 0;	// Nouvelle ligne, avec donc 0 octects
		lzDataText[nDataText++] = '\r';	// Place un saut de line (1)
		lzDataText[nDataText++] = '\n';	// Place un saut de line (2)
	}

	// Déplace le pointeur
	_outp(sPortClk, _inp(sPortClk) | cBitClk);	// Clock 1
	_outp(sPortClk, _inp(sPortClk) &amp; ~cBitClk);	// Clock 0
}</code><note title="Remarque" img="http://www.programmationworld.com/site/images/rmq.gif" name="note">Nous ne nous préoccupons pas du format de la puce ici. Même si la T1G ne contient que 256 bits, elle renverra 2 fois les même données dans les 512 bits lus. Ainsi nous testons d'ailleurs après le format de la carte.</note><paragraph name="affichage 1">Un fois les données lues et le type de carte récupéré, nous affichons déjà ces premières informations.</paragraph><code syntax="C++" name="affichage 1">// Affiche les données brutes
SetDlgItemText(g_hDlg, IDC_DATA_EDIT, lzDataText);

// Version
if (bT2G)
	SetDlgItemText(g_hDlg, IDC_VERSION_EDIT, "T2G");
else
	SetDlgItemText(g_hDlg, IDC_VERSION_EDIT, "T1G");</code><paragraph name="convertion">Il nous faut convertir une série de bits d'une base en une autre. Binaire, décimal, hexadécimal, octal, sont des bases. Par exemple 110 en binaire (base 2) se calcule: 1x2^2 + 1x2^1 + 0x2^0 = 6. En octal (base 8), 123 se calcule: 1x8^2 + 2x8^1 + 3x8^0 = 83. (Le symbole ^ veut dire "puissance").</paragraph><code syntax="C++" name="convertion">// Convertion binaire en décimal
nPuissance = 1;
for (i=63; i&gt;=52; i--)
{
	if (bData[i])
		nUnitTotal += nPuissance;
	nPuissance *= 2;
}</code><paragraph name="convertion 2">Un peu plus loin dans le code source vous remarquerez une conversion d'octal en décimal pour les unités utilisées. Il reste donc nUnitésRestantes = nUnitésTotales - nUnitésUtilisées. Pour transformer notre valeur numérique en chaîne nous utiliserons sprint(...). Nous affichons les dernières informations et nous avons le contenu de notre puce. Et nous voila avec les informations de cette petite merveille.</paragraph><note title="Danger" img="http://www.programmationworld.com/site/images/avoid.gif" name="note">Ne pas oublier de d'inclure les headers des fonctions utilisées: "#include // sprintf(...)" et "#include // _inp(..) _outp(...)".</note><paragraph name="fin">Je remercies &lt;a href="mailto:arabine@programmationworld.com"&gt;Anthony Rabine&lt;/a&gt; pour son article dans PC-Team. J'espère que aurez apprécié cet mini application. Je vous conseil de regarde le code source complet qui est commenté. Les parties du code source ici présentées ont été parfois un peu raccourcis par rapport au &lt;a href="http://www.alc-wbc.com/download/sources/cpucepuce.zip"&gt;code complet&lt;/a&gt;. Vous remarquerez que certains fonctionnalités n'ont pas été implémentées. Ainsi la fonction de détection d'insertion. Vous avez du pain sur la planche.</paragraph></section></document>
